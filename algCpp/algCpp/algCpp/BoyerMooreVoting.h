#pragma once
#include <iostream>
namespace BoyerMooreVotingNM
{
	//NotRead
	/*
		BoyerMooreMejority algorithm
        BoyerMoore alg is used to find mejority element in an array. Mejority means, more than 50% votes(or occurences)
		But BoyerMoore alg has 'negative votin'g so the element with 49% may loose, and the element with single vote may win, provided that it comes at the end.
		So to avoid such false positive, we have to verify whether the output generated by BoyerMoore alg indeed has 50% of votes.
		So Mejority Alg has two steps
			-Find the mejority element using BoyerMoore alg
			-Then count the occurences of the 'choosen element', to make sure that it is more than 50%.
     
              http://stackoverflow.com/questions/3260653/algorithm-to-find-top-10-search-terms            
              Boyers Voting alg
                    Iterate the array of elements. Have two variables:  'currentTopElement' and 'occurenceCount'.
                    At the beginning of the iteration set currentTopElement = src[0], and occurenceCount = 1;
                    As we proceed further, compare currentTopElement against currentElement.
					if (currentElement != currentTopElement)
						then negative vote by reducing 'occurenceCount' by one.
                    If the 'occurence count' drops to zero, then unseat the currentElement, and make the currentElement as currentTopElement
						currentTopElement = currentElement
						occurenceCount = 1
					When the iteration ends, we will have something in currentTopElement.
					But that may not be the real winner, so we go through the array for the seconde time,
					and count the occurences of currentTopElement. If occurence is more than 50%, then currentTopElement is indeed the mejority element.
					
					
				    Negative voting has many effects. Say value '5' may have 3 votes. '5' will loose all the three votes if the
                    next 3 values are not '5'. In fact the last element of the array may be win vote because it have 1 vote.
                                          
                    Ex: {5,5,5,7,8,9,10} //In the end 10 will win the vote by having just 1 vote. '5' had three votes but it lost all the 3
                                                                                            //because of 7, 8, 9
	*/
	class BoyerMooreVotingX
	{
		public:
			void callBoyerVoting()
			{
				//int data[8] = {5, 5, 5, 7, 8, 9, 10}; //failes  10

				int data[9] = { 3, 3, 4, 2, 4, 4, 2, 4, 4 }; //passes 4

				int winner = BoyerMooreVote(data, 9);

				VerifyWinner(data, 9, winner);

			}

		private:
			int BoyerMooreVote(int* data, int len)
			{
				int selection = -1;
				int votes = 0;
				for (int i = 0; i < len; i++)
				{
					if (i == 0)
					{
						selection = data[i];
						votes = 1;
					}
					else
					{
						if (selection == data[i])
						{
							votes++;
						}
						else
						{
							votes--; //Negative voting
							if (votes == 0)
							{
								selection = data[i];
								votes = 1;
							}
						}
					}
				}

				return selection;
			}

			void VerifyWinner(int* data, int len, int winner)
			{
				int votes = 0;
				for (int i = 0; i < len; i++)
				{
					if (data[i] == winner)
					{
						votes++;
					}
				}

				if (votes >= len / 2)
					std::cout << winner << " is the winner. Votes : " << votes << std::endl;
			
			}

	};
};
